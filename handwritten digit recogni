{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0f84e45b-d9df-44c5-b9ea-8bdfa3cc32f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ef8831d4-5100-479d-a567-43e5cdfd1ae4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"train (7).csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "281031a9-6892-41aa-be93-d9b905391091",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "0      1       0       0       0       0       0       0       0       0   \n",
       "1      0       0       0       0       0       0       0       0       0   \n",
       "2      1       0       0       0       0       0       0       0       0   \n",
       "3      4       0       0       0       0       0       0       0       0   \n",
       "4      0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n",
       "0       0  ...         0         0         0         0         0         0   \n",
       "1       0  ...         0         0         0         0         0         0   \n",
       "2       0  ...         0         0         0         0         0         0   \n",
       "3       0  ...         0         0         0         0         0         0   \n",
       "4       0  ...         0         0         0         0         0         0   \n",
       "\n",
       "   pixel780  pixel781  pixel782  pixel783  \n",
       "0         0         0         0         0  \n",
       "1         0         0         0         0  \n",
       "2         0         0         0         0  \n",
       "3         0         0         0         0  \n",
       "4         0         0         0         0  \n",
       "\n",
       "[5 rows x 785 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "bf73e033-01db-4574-b083-a137de592b63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42000, 785)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "dd4d5edd-4ba6-4386-aa01-ca71418269be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 4, 7, 3, 5, 8, 9, 2, 6], dtype=int64)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['label'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c08e80d1-9279-47aa-99cd-e30f9f9e3f4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop('label' , axis='columns')\n",
    "Y = df['label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f30c6834-d45d-4805-93af-004d1a8ab5f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  58,  73, 163,\n",
       "       215, 254, 215,  73,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,  36,  74, 223, 249,\n",
       "       253, 160, 108, 121, 241, 142,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   6, 108, 128, 241, 232,\n",
       "       216, 216, 184,  13,   0,   0,  61,  11,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  37, 253, 253,\n",
       "       157,  23,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  24,\n",
       "       201, 253, 155,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,  19, 254, 202,   5,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,  19, 253, 254,  18,   0,   0,   0,   0,  12,\n",
       "        55,  51,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,  10, 217, 254,  31,   0,   3, 102,\n",
       "       186, 225, 253, 250, 139,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0, 181, 254, 108,  29,\n",
       "       184, 253, 235, 150,  67, 139, 233,  79,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 117, 254,\n",
       "       192, 230, 246,  98,   0,   0,   0,  44, 253, 207,   7,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "        33, 255, 254, 243,  71,   0,   0,   0,   0,   0, 156, 255,  76,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0, 215, 253,  81,   0,   0,   0,   0,   0,   0,  91,\n",
       "       254, 160,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,  11,  36,   5,   0,   0,   0,   0,   0,\n",
       "         0,  91, 254, 198,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0, 129, 254, 159,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,  79, 232, 254,  76,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0, 108, 234, 254, 156,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,  36, 191, 250, 249, 166,   7,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   6,  76, 192, 241, 253, 234, 104,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,  80,  19,  45, 193, 207, 253, 253, 183,  93,  27,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0, 167, 253, 254, 253, 175, 124,  72,  26,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0], dtype=int64)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.values[3056]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "28c158e7-8e21-42f6-b2ab-71e26e86e251",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(Y[3056])\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.imshow(X.values[3056].reshape(28,28) , cmap='gray')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "96796848-d801-4f8b-af95-dadbc96ce14a",
   "metadata": {},
   "outputs": [
    {
     "ename": "MemoryError",
     "evalue": "Unable to allocate 62.8 MiB for an array with shape (784, 10500) and data type int64",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mMemoryError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-23-b9ce2baa683f>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mxtrain\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mxtest\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mytrain\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mytest\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mY\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py\u001b[0m in \u001b[0;36mtrain_test_split\u001b[1;34m(test_size, train_size, random_state, shuffle, stratify, *arrays)\u001b[0m\n\u001b[0;32m   2197\u001b[0m         \u001b[0mtrain\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtest\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0marrays\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mstratify\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2198\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2199\u001b[1;33m     return list(chain.from_iterable((_safe_indexing(a, train),\n\u001b[0m\u001b[0;32m   2200\u001b[0m                                      _safe_indexing(a, test)) for a in arrays))\n\u001b[0;32m   2201\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py\u001b[0m in \u001b[0;36m<genexpr>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m   2198\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2199\u001b[0m     return list(chain.from_iterable((_safe_indexing(a, train),\n\u001b[1;32m-> 2200\u001b[1;33m                                      _safe_indexing(a, test)) for a in arrays))\n\u001b[0m\u001b[0;32m   2201\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2202\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\utils\\__init__.py\u001b[0m in \u001b[0;36m_safe_indexing\u001b[1;34m(X, indices, axis)\u001b[0m\n\u001b[0;32m    340\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    341\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"iloc\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 342\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0m_pandas_indexing\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindices\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindices_dtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    343\u001b[0m     \u001b[1;32melif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"shape\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    344\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0m_array_indexing\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindices\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindices_dtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\utils\\__init__.py\u001b[0m in \u001b[0;36m_pandas_indexing\u001b[1;34m(X, key, key_dtype, axis)\u001b[0m\n\u001b[0;32m    191\u001b[0m     \u001b[1;31m# check whether we should index with loc or iloc\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    192\u001b[0m     \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0miloc\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mkey_dtype\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'int'\u001b[0m \u001b[1;32melse\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 193\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[1;32melse\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    194\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    195\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    893\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    894\u001b[0m             \u001b[0mmaybe_callable\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply_if_callable\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 895\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmaybe_callable\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    896\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    897\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_is_scalar_access\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[1;34m(self, key, axis)\u001b[0m\n\u001b[0;32m   1490\u001b[0m         \u001b[1;31m# a list of integers\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1491\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mis_list_like_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1492\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_list_axis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1493\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1494\u001b[0m         \u001b[1;31m# a single integer\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m_get_list_axis\u001b[1;34m(self, key, axis)\u001b[0m\n\u001b[0;32m   1472\u001b[0m         \"\"\"\n\u001b[0;32m   1473\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1474\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_take_with_is_copy\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1475\u001b[0m         \u001b[1;32mexcept\u001b[0m \u001b[0mIndexError\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1476\u001b[0m             \u001b[1;31m# re-raise with different error message\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m_take_with_is_copy\u001b[1;34m(self, indices, axis)\u001b[0m\n\u001b[0;32m   3598\u001b[0m         \u001b[0mSee\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mdocstring\u001b[0m \u001b[0mof\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;31m`\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mfull\u001b[0m \u001b[0mexplanation\u001b[0m \u001b[0mof\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mparameters\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3599\u001b[0m         \"\"\"\n\u001b[1;32m-> 3600\u001b[1;33m         \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindices\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mindices\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3601\u001b[0m         \u001b[1;31m# Maybe set copy if we didn't actually change the index.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3602\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mresult\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_axis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mequals\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_axis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36mtake\u001b[1;34m(self, indices, axis, is_copy, **kwargs)\u001b[0m\n\u001b[0;32m   3584\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_consolidate_inplace\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3585\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3586\u001b[1;33m         new_data = self._mgr.take(\n\u001b[0m\u001b[0;32m   3587\u001b[0m             \u001b[0mindices\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_block_manager_axis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mverify\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3588\u001b[0m         )\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py\u001b[0m in \u001b[0;36mtake\u001b[1;34m(self, indexer, axis, verify, convert)\u001b[0m\n\u001b[0;32m   1472\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1473\u001b[0m         \u001b[0mnew_labels\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1474\u001b[1;33m         return self.reindex_indexer(\n\u001b[0m\u001b[0;32m   1475\u001b[0m             \u001b[0mnew_axis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnew_labels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1476\u001b[0m         )\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py\u001b[0m in \u001b[0;36mreindex_indexer\u001b[1;34m(self, new_axis, indexer, axis, fill_value, allow_dups, copy, consolidate, only_slice)\u001b[0m\n\u001b[0;32m   1309\u001b[0m             )\n\u001b[0;32m   1310\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1311\u001b[1;33m             new_blocks = [\n\u001b[0m\u001b[0;32m   1312\u001b[0m                 blk.take_nd(\n\u001b[0;32m   1313\u001b[0m                     \u001b[0mindexer\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m   1310\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1311\u001b[0m             new_blocks = [\n\u001b[1;32m-> 1312\u001b[1;33m                 blk.take_nd(\n\u001b[0m\u001b[0;32m   1313\u001b[0m                     \u001b[0mindexer\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1314\u001b[0m                     \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\internals\\blocks.py\u001b[0m in \u001b[0;36mtake_nd\u001b[1;34m(self, indexer, axis, new_mgr_locs, fill_value)\u001b[0m\n\u001b[0;32m   1393\u001b[0m             \u001b[0mallow_fill\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1394\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1395\u001b[1;33m         new_values = algos.take_nd(\n\u001b[0m\u001b[0;32m   1396\u001b[0m             \u001b[0mvalues\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mallow_fill\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mallow_fill\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfill_value\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mfill_value\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1397\u001b[0m         )\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\algorithms.py\u001b[0m in \u001b[0;36mtake_nd\u001b[1;34m(arr, indexer, axis, out, fill_value, allow_fill)\u001b[0m\n\u001b[0;32m   1752\u001b[0m             \u001b[0mout\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mempty\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mout_shape\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0morder\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"F\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1753\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1754\u001b[1;33m             \u001b[0mout\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mempty\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mout_shape\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1755\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1756\u001b[0m     func = _get_take_nd_function(\n",
      "\u001b[1;31mMemoryError\u001b[0m: Unable to allocate 62.8 MiB for an array with shape (784, 10500) and data type int64"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "xtrain,xtest,ytrain,ytest = train_test_split(X,Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72ec93d5-fd43-47b0-b157-84a211499a87",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rmodel = RandomForestClassifier(max_depth=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "32f3c97c-d621-49ff-8119-e5abe3ef14a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(max_depth=12)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmodel.fit(xtrain,ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1da54fe6-d65e-4b2e-8aa4-8108730a744f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9913968253968254\n",
      "0.9533333333333334\n"
     ]
    }
   ],
   "source": [
    "print(rmodel.score(xtrain,ytrain))\n",
    "print(rmodel.score(xtest,ytest))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "55df742a-2c2a-4e04-ad56-4d0c050b6cad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\n"
     ]
    }
   ],
   "source": [
    "print(rmodel.predict([xtest.values[106]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "efcbbaeb-bd1e-425c-b549-5f84524152bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "print(ytest.values[99])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5b28e605-26f8-46cb-928d-05dfeb003eaf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(xtest.values[106].reshape(28,28) , cmap='gray')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "56238006-fe23-48d8-947e-0a66976a2d04",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: opencv-python in c:\\users\\mohap\\anaconda3\\lib\\site-packages (4.6.0.66)\n",
      "Requirement already satisfied: numpy>=1.14.5 in c:\\users\\mohap\\anaconda3\\lib\\site-packages (from opencv-python) (1.20.1)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install opencv-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dd152033-af43-4497-85b8-922624b388ad",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-3-1620a6f8423e>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-3-1620a6f8423e>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    > cv2.cvtColor()\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "> cv2.cvtColor()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a40a39c9-de4a-4c18-a2ea-7879a97ac7f6",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'img_path' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-4-d99ff109e271>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mimg\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'img_path' is not defined"
     ]
    }
   ],
   "source": [
    "img = cv2.imread(img_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e915629d-4195-4c3d-a2f1-a21461db1052",
   "metadata": {},
   "outputs": [
    {
     "ename": "error",
     "evalue": "OpenCV(4.6.0) D:\\a\\opencv-python\\opencv-python\\opencv\\modules\\imgproc\\src\\color.cpp:182: error: (-215:Assertion failed) !_src.empty() in function 'cv::cvtColor'\n",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31merror\u001b[0m                                     Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-5-288bb9abf52f>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mim1\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'cc.jpng'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[0mim1\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcvtColor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mim1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mCOLOR_BGR2GRAY\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[0mim1\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresize\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mim1\u001b[0m \u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m28\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m28\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[0mim1\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m255\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mim1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31merror\u001b[0m: OpenCV(4.6.0) D:\\a\\opencv-python\\opencv-python\\opencv\\modules\\imgproc\\src\\color.cpp:182: error: (-215:Assertion failed) !_src.empty() in function 'cv::cvtColor'\n"
     ]
    }
   ],
   "source": [
    "#Open CV\n",
    "\n",
    "import cv2\n",
    "\n",
    "im1 = cv2.imread('cc.png')\n",
    "im1 = cv2.cvtColor(im1,cv2.COLOR_BGR2GRAY)\n",
    "im1 = cv2.resize(im1 , (28,28))\n",
    "im1 = 255-im1\n",
    "\n",
    "im1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2cc3b66-6b64-424f-b943-755d67ca8ef5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f805a369-7a40-4e58-b395-f824ea9e9c48",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcc109d9-8852-4958-b287-36d637652763",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(rmodel.predict([im1.ravel()]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7250ab97-1dab-4cd8-a1f4-7441c91ec9a8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
